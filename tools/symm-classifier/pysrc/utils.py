'''
Created on Oct 22, 2012

@author: ezequiel
'''
import sys
import datetime
import os
import os.path
import imp
import argparse

def list_to_file(fname, content, sep='\n'):
    f = open(fname, 'w')
    f.write(sep.join(content))
    return fname

def get_filename(path, ext=False):
    fname = os.path.basename(path)
    if ext:
        return os.path.splitext(fname)[0]
    return fname

def print_msg(msg, silent=False):
    if not silent:
        dt = datetime.datetime.today().strftime('%H:%M:%S.%f')
        print '%s - %s : %s ' % (dt, os.getpid(), msg)

def str_to_tuple(s):
    l = []
    for t in s:
        a, b = map(int, t)
        l.append((a, b))
    return l

def list_files(folder, ext=None):
    sfiles = []
    for root, _, files  in os.walk(folder):
        for f in files:
            _, e = os.path.splitext(f)
            if (ext is None) or (e == ext):
                sfiles.append(os.path.join(root, f))
    return sfiles

def dump_csv(filename, header, data):
    content = [','.join(header)] + map(lambda x: ','.join(map(lambda y: str(y), x)), data)
    list_to_file(filename, content)

def dump_symm_file(rfolder, filename, gens):
    str_gens = []
    for g in gens:
        str_g = []
        for c in g:
            str_g.append(('%s %s %s' % c))
        str_gens.append(','.join(str_g))
    
    fname = os.path.join(rfolder, ('%s.symm' % filename))
    f = open(fname, 'w')
    for s in str_gens:
        f.write(s + '\n')
    # print_msg(('Symm file: %s' % fname))
    print fname

def dump_typified_symm_file(filename, gens):
    lines =[]
    for g in gens:
        line=[]
        line.append(g['type'])
        for md,perm in g['perms'].iteritems():
            line.append('[')
            line.append(('md:%s' % md))
            line.append(('type:%s' % perm[0]))
            line.append('cycles:')
            for c in perm[1:]:
                line.append(('(%s %s %s %s)' % (c[0],c[1],c[2],c[3])))
            line.append(']')
        lines.append(' '.join(line))
    list_to_file(filename, lines)

def dump_typified_symm_file2(filename, gens):
    lines =[]
    for g in gens:
        line=[]
        line.append(('1' if g['type']=='safe' else '0'))
        for md,perm in g['perms'].iteritems():
            lp = []
            lp.append(('%s' % md))
            lp.append(('%s' % _cycle_type(perm[0])))
            for c in perm[1:]:
                lp.append(('%s %s %s %s' % (_cycle_type(c[0]),_perm_type(c[1]),c[2],c[3])))
            line.append(','.join(lp))
        lines.append('|'.join(line))
    list_to_file(filename, lines)

def _perm_type(t):
    if t == 'S':
        return '0'
    elif t== 'P':
        return '1'
    else:
        return '2'    

CYCLE_TYPES={'A':'0','B':'1','C':'2','D':'3',
            'AB':'4','AC':'5','AD':'6','BC':'7',
            'BD':'8','CD':'9','ABC':'10','ABD':'11',
            'ACD':'12','BCD':'13','ABCD':'14'}
    
def _cycle_type(t):
    return CYCLE_TYPES[t]    

    
def process_data_args():
    parser = argparse.ArgumentParser(description='Process the data in the file generated by run_var_analyzer.sh')
    parser.add_argument('file', metavar='DATAFILE', help=('Data file to load.'
                                    'It must be a .txt file generated by run_var_analyzer.sh.'))
    parser.add_argument('-f', '--folder', default=os.getcwd()+'/out', help='Destination folder of the stats files.')
    parser.add_argument('-s', '--silent', action='store_true', help='Suppress all the output from the tool.')
    return parser

def classify_symms_args():
    parser = argparse.ArgumentParser(description='Classify the symmetries of a problem based on the provided variable classification.')
    parser.add_argument('varfile', metavar='VARFILE', help=('Variable classification file.'))
    parser.add_argument('symmfolder', metavar='SYMFOLDER', help=('Folder where .symm files are located'))
    parser.add_argument('-c', '--computer', action='store_true', help='Computer-friendly output.')
    parser.add_argument('-f', '--folder', default=os.getcwd()+'/out', help='Destination folder of the generated files.')
    parser.add_argument('-s', '--silent', action='store_true', help='Suppress all the output from the tool.')
    return parser
